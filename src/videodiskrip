#!/usr/bin/env python3

import os, sys, dvdtrackrip, parseBatchfile, shutil, argparse, helper

class ArgumentError(Exception):
	"""Exception raised when calling a videodiskrip function with nonvalid Arguments.

	Attributes:
		function ---
		errorMessage --
	"""
	def __init__(self, function, errorMessage):
		self.errorMessage = errorMessage
		self.function = function

class FileNotFoundError(Exception):
	"""Exception raised when calling a videodiskrip function with nonvalid Arguments.

	Attributes:
		function ---
		errorMessage --
	"""
	def __init__(self, function, errorMessage):
		self.errorMessage = errorMessage
		self.function = function

def printwarning(message):
	print('\033[93m', message, '\033[0m', file=sys.stderr)

def printerror(message):
	print('\033[91m', message, '\033[0m', file=sys.stderr)

def execJobQueue(jobQueue):
	sourceInfo = None
	for job in jobQueue:
		if isinstance(job, dict):
			if job.get('Control', '') == "newVideoSource":
				print(job['Control'])
				sourceInfo = None
		elif isinstance(job, helper.rippingJob):
			if sourceInfo is None:
				sourceInfo = dvdtrackrip.getDvdTrackInfo(job.SOURCE_PATH)

			sourceTracknumber = helper.getTracksInThreshold(sourceInfo, *job.OPTIONS['THRESHOLD'].split())[job.TRACKNUMBER -1]
			outputFilename = helper.fillTemplateString(job.METADATA, job.OPTIONS['OUTPUT_FILENAME'])
			chaptersXMLData = helper.generateChaptersXML(sourceInfo['track'][sourceTracknumber - 1]['chapter'], helper.chapter_formatRestructure(job.CHAPTERDATA))
			metadataXMLData = helper.createMetadataXML(job.OPTIONS['METATAGS_TEMPLATEFILE'], job.METADATA)

			print(job.SOURCE_PATH + ":" + str(sourceTracknumber) + " -> " + job.OUTPUT_PATH + outputFilename)
			#print(job.OPTIONS)
			#print(job.CHAPTERDATA)
			#print(job.METADATA)

			try:
				if not os.path.isdir(job.OUTPUT_PATH):
					os.makedirs(job.OUTPUT_PATH)
				muxedOutput = dvdtrackrip.dvdtrackrip(job.SOURCE_PATH, sourceTracknumber, job.OUTPUT_PATH + outputFilename, chaptersXMLData, metadataXMLData)
				if not os.path.exists(muxedOutput):
					raise FileNotFoundError(2, "dvdtrackrip:", muxedOutput)
				shutil.move(muxedOutput, job.OUTPUT_PATH + outputFilename)

			except dvdtrackrip.StopRippingError as error:
				print("Abort script. Removing temporary files")
				shutil.rmtree(error.workspace)
				sys.exit(1)
			except dvdtrackrip.SubProcessError as error:
				raise

			else:
				shutil.rmtree(os.path.dirname(muxedOutput))

if __name__ == "__main__":
	#BEGIN main

	try:
		cmdArg_Parser = argparse.ArgumentParser(description="rip specific track(s) from a DVD structure into .mkv container(s) without reencoding")
		cmdArg_Parser.add_argument("-s", "--source", default=".", metavar="DISKSOURCE", help="the source strukture to rip from")
		cmdArg_Parser.add_argument("-d", "--destination", default=".", help="Directory where to save the ripped file")
		cmdArg_Parser.add_argument("-b", "--batchfile", metavar="BATCHFILE", help="the file with jobs for batch mode and data to map for the items", type=argparse.FileType('r'))
		cmdArg_Parser.add_argument("-t", "--tracksToRip", metavar="TRACK", nargs='*', type=int, help="the Track on the DVD to rip; if omit all tracks are ripped")
		cmdArgs = cmdArg_Parser.parse_args()

		sourcePath = os.path.abspath(os.path.normpath(cmdArgs.source))
		destinationPath = os.path.abspath(os.path.normpath(cmdArgs.destination))
		batchfile = cmdArgs.batchfile

		if cmdArgs.batchfile:
			if cmdArgs.source or cmdArgs.destination:
				printwarning("The Options --source and -- destination are ignored when used in combinantion with --batchfile")
			jobQueue = parseBatchfile.parseBatchFile(batchfile)

		elif cmdArgs.tracksToRip:
			printwarning("not yet implemented")

		execJobQueue(jobQueue)



	#END main

	except FileNotFoundError as error:
		printerror("FileNotFound Error")
		printerror("Context:" + str(error.args[0]))
		printerror("File:" + error.args[1])
		if error.args[0] is "dvdtrackrip":
			printerror(error.args[1] + "is missing, but should be there thus converters seemed not work correctly")

	except shutil.Error as error:
		printwarning(error.args[0])

	except dvdtrackrip.DvdTrackError as error:
		printerror("In Dvd source '" + error.args[0] + "' exists no Track number " + error.args[1])

	except dvdtrackrip.DvdSourceError as error:
		printerror("The path '" + error.args[0] + "' contains no valid DVD source")
		printerror("stderr: \n" + error.args[1])

	except dvdtrackrip.SubProcessError as error:
		printerror( "\nCommand:" + error.args[0] )
		printerror( "\nSubprocessor stderr: " + error.args[1] )
		printerror( "\nReturncode:" + str(error.args[2]) )
