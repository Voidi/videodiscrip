#!/usr/bin/env python3.3

import os, sys, dvdtrackrip, parseBatchfile, shutil, argparse, shlex, helper

class ArgumentError(Exception):
	"""Exception raised when calling a videodiskrip function with nonvalid Arguments.

	Attributes:
		function ---
		errorMessage --
	"""
	def __init__(self, function, errorMessage):
		self.errorMessage = errorMessage
		self.function = function

def printwarning(message):
	print('\033[93m', message, '\033[0m', file=sys.stdout)

def printerror(message):
	print('\033[91m', message, '\033[0m', file=sys.stdout)

def execJobQueue(jobQueue):
	dvdInfo = None
	for job in jobQueue:
		if isinstance(job, dict):
			if job.get('Control', '') == "newVideoSource":
				print(job['Control'])
				dvdInfo = None
		else:
			if dvdInfo is None:
				dvdInfo = dvdtrackrip.getDvdTrackInfo(job.SOURCE_PATH)
			print(str(job))
			# print(job['SOURCE_PATH-PART'])
			# print(job['OUTPUT_PATH-PART'])
			# optionParser = argparse.ArgumentParser()
			# optionParser.add_argument('-t', '--threshold', nargs=2)
			# optionParser.add_argument('-s','--subtitle_convert')
			# optionParser.add_argument("-T", "--tags_templatefile", type=argparse.FileType('r'))
			# optionParser.add_argument("-f", "--filename")

			# args = optionParser.parse_args(shlex.split(job['OPTIONS']))
			# print(shlex.split(job['OPTIONS']))

			# print(helper.getTracksInThreshold(dvdInfo, *args.threshold)[job['SOURCE_TRACKNUMBER']-1])
			# print(job['CHAPTERS'])
			# print(job['METADATA'])

if __name__ == "__main__":
	#BEGIN main

	try:
		cmdArg_Parser = argparse.ArgumentParser(description="rip specific track(s) from a DVD structure into .mkv container(s) without reencoding")
		cmdArg_Parser.add_argument("-s", "--source", default=".", metavar="DISKSOURCE", help="the source strukture to rip from")
		cmdArg_Parser.add_argument("-d", "--destination", default=".", help="Directory where to save the ripped file")
		cmdArg_Parser.add_argument("-b", "--batchfile", metavar="BATCHFILE", help="the file with jobs for batch mode and data to map for the items", type=argparse.FileType('r'))
		cmdArg_Parser.add_argument("-t", "--tracksToRip", metavar="TRACK", nargs='*', type=int, help="the Track on the DVD to rip; if omit all tracks are ripped")

		cmdArgs = cmdArg_Parser.parse_args()
		#print(cmdArgs)

		sourcePath = os.path.abspath(os.path.normpath(cmdArgs.source))
		destinationPath = os.path.abspath(os.path.normpath(cmdArgs.destination))
		if cmdArgs.batchfile:
			jobQueue = parseBatchfile.parseBatchFile(cmdArgs.batchfile)

		elif cmdArgs.tracksToRip:
			pass

		execJobQueue(jobQueue)
	#END main

	except FileNotFoundError as error:
		printerror("FileNotFound Error")
		printerror("Context:" + error.args[0])
		printerror("File:" + error.args[1])
		if error.args[0] is "dvdtrackrip":
			printerror(error.args[1] + "is missing, but it should be there thus converters seemd to work correct")

	except shutil.Error as error:
		printwarning(error.args[0])

	except dvdtrackrip.DvdTrackError as error:
		printerror("In Dvd source '" + error.args[0] + "' exists no Track number " + error.args[1])

	except dvdtrackrip.DvdSourceError as error:
		printerror("The path '" + error.args[0] + "' contains no valid DVD source")
		printerror("stderr: \n" + error.args[1])

	except dvdtrackrip.SubProcessError as error:
		printerror( "\nCommand:" + error.args[0] )
		printerror( "\nSubprocessor stderr: " + error.args[1] )
		printerror( "\nReturncode:" + str(error.args[2]) )
